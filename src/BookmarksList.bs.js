// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Link$ReactTemplate = require("./Link.bs.js");

var ppx_printed_query = "query getBookmarks  {\nbookmarks  {\nid  \ntitle  \nurl  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["bookmarks"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeArray(match$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Js_primitive.valFromOption(match);
                  var match$1 = value$1["id"];
                  var field_id;
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeString(match$1);
                    field_id = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$1));
                  } else {
                    field_id = Js_exn.raiseError("graphql_ppx: Field id on type Bookmark is missing");
                  }
                  var match$3 = value$1["title"];
                  var field_title;
                  if (match$3 !== undefined) {
                    var match$4 = Js_json.decodeString(match$3);
                    field_title = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$3));
                  } else {
                    field_title = Js_exn.raiseError("graphql_ppx: Field title on type Bookmark is missing");
                  }
                  var match$5 = value$1["url"];
                  var field_url;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeString(match$5);
                    field_url = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$5));
                  } else {
                    field_url = Js_exn.raiseError("graphql_ppx: Field url on type Bookmark is missing");
                  }
                  return /* record */[
                          /* id */field_id,
                          /* url */field_url,
                          /* title */field_title
                        ];
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected object of type Bookmark, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field bookmarks on type Query is missing");
    }
    return {
            bookmarks: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetBookmarks = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetBookmarksQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("BookmarksList");

function make$1() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var bookmarkQuery = make(/* () */0);
              return ReasonReact.element(undefined, undefined, Curry.app(GetBookmarksQuery[/* make */3], [
                              Js_primitive.some(bookmarkQuery.variables),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "Loading");
                                  } else if (result.tag) {
                                    return React.createElement("div", {
                                                style: {
                                                  display: "flex",
                                                  fontSize: "1.2em",
                                                  lineHeight: "1.4em",
                                                  padding: "20px",
                                                  width: "100%",
                                                  alignItems: "flex-start",
                                                  flexDirection: "column"
                                                }
                                              }, $$Array.mapi((function (index, param) {
                                                      return ReasonReact.element(param[/* id */0], undefined, Link$ReactTemplate.make(/* array */[], index, param[/* title */2], param[/* url */1]));
                                                    }), result[0].bookmarks));
                                  } else {
                                    return React.createElement("div", {
                                                style: {
                                                  backgroundColor: "#b8dbd9",
                                                  color: "black",
                                                  fontFamily: "Helvetica, sans-serif",
                                                  fontSize: "2em",
                                                  padding: "20%"
                                                }
                                              }, result[0].message);
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.GetBookmarks = GetBookmarks;
exports.GetBookmarksQuery = GetBookmarksQuery;
exports.component = component;
exports.make = make$1;
/* GetBookmarksQuery Not a pure module */
